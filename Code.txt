## Sneha Bedadhala
Date: 10/28/2022
Written a code for validating the field

        function TotalSeats(cellvalue, options, rowObject) {
            if (rowObject.AvaSeats == "1")
                return "<select id='ddlSeats" + options.rowId + "' name='" + options.rowId + "'style='width:75px;'><option value=1>1</option></select>";
            else if (rowObject.AvaSeats == "2")
                return "<select id='ddlSeats" + options.rowId + "' name='" + options.rowId + "'style='width:75px;'><option value=1>1</option><option value=2>2</option></select>";
            else if (rowObject.AvaSeats == "3")
                return "<select id='ddlSeats" + options.rowId + "' name='" + options.rowId + "'style='width:75px;'><option value=1>1</option><option value=2>2</option><option value=3>3</option></select>";
            else if (rowObject.AvaSeats == "4")
                return "<select id='ddlSeats" + options.rowId + "' name='" + options.rowId + "'style='width:75px;'><option value=1>1</option><option value=2>2</option><option value=3>3</option><option value=4>4</option></select>";
            else if (rowObject.AvaSeats == "5")
                return "<select id='ddlSeats" + options.rowId + "' name='" + options.rowId + "'style='width:75px;'><option value=1>1</option><option value=2>2</option><option value=3>3</option><option value=4>4</option><option value=5>5</option></select>";
        }


Date: 11/04/2022

Doing research on implementing code on Session and state management in ASP.NET Core to preserve user data between requests:
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/app-state?view=aspnetcore-6.0

Date: 11/11/2022

Code for BookingStatus upon accept or rejecting the ride and populating the alert message
//AcceptRide
        function AcceptRide(obj) {
            var ob = new Object();
            var id = obj;
            var Rowdata = jQuery("#tblDetails1").jqGrid('getRowData', id);
            ob.TxnId = Rowdata.TxnId;
            ob.BookingStatus = "A";

            PageMethods.SaveData(ob, Onsuccess, OnFailure);
            function Onsuccess(r) {
                alert(r);
                location.reload();
            }
            function OnFailure(r) {
                alert(r);
            }
            return false;
        }
//Reject ride
        function RejectRide(obj) {
            var ob = new Object();
            var id = obj;
            var Rowdata = jQuery("#tblDetails1").jqGrid('getRowData', id);

            ob.TxnId = Rowdata.TxnId;
            ob.BookingStatus = "R";

            PageMethods.SaveData(ob, Onsuccess, OnFailure);
            function Onsuccess(r) {
                alert(r);
                location.reload();
            }
            function OnFailure(r) {
                alert(r);
            }
            return false;
        }

Date: 11/11/2022

Code for Dasboard creation of our application

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Master.aspx.cs" %>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Bearcats</title>

  <!-- Font Awesome -->
  <link rel="stylesheet" href="../../plugins/fontawesome-free/css/all.min.css">
  <!-- overlayScrollbars -->
  <link rel="stylesheet" href="../../plugins/overlayScrollbars/css/OverlayScrollbars.min.css">
  <!-- Theme style -->
  <link rel="stylesheet" href="../../dist/css/adminlte.min.css">
</head>
<body class="hold-transition sidebar-mini layout-fixed">
<!-- Site wrapper -->
<div class="wrapper">
  <!-- Navbar -->
  <nav class="main-header navbar navbar-expand navbar-white navbar-light">
    <!-- Left navbar links -->
    <ul class="navbar-nav">
      <li class="nav-item">
        <a class="nav-link" data-widget="pushmenu" href="#" role="button"><i class="fas fa-bars"></i></a>
      </li>
      <li class="nav-item d-none d-sm-inline-block">
        <a href="../../index3.html" class="nav-link">Home</a>
      </li>
    </ul>

    <!-- Right navbar links -->
    <ul class="navbar-nav ml-auto">
     
    </ul>
  </nav>
  <!-- /.navbar -->

  <!-- Main Sidebar Container -->
  <aside class="main-sidebar sidebar-dark-primary elevation-4">
    <!-- Brand Logo -->
    <a href="../../index3.html" class="brand-link">
      <img src="../../dist/img/AdminLTELogo.png" alt="AdminLTE Logo" class="brand-image img-circle elevation-3" style="opacity: .8">
      <span class="brand-text font-weight-light">Bearcats</span>
    </a>

    <!-- Sidebar -->
    <div class="sidebar">
      <!-- Sidebar user (optional) -->
      <div class="user-panel mt-3 pb-3 mb-3 d-flex">
        <div class="image">
          <img src="../../dist/img/user2-160x160.jpg" class="img-circle elevation-2" alt="User Image">
        </div>
        <div class="info">
          <a href="#" class="d-block">Login Name</a>
        </div>
      </div>

      <!-- Sidebar Menu -->
      <nav class="mt-2">
        <ul class="nav nav-pills nav-sidebar flex-column" data-widget="treeview" role="menu" data-accordion="false">
          <!-- Add icons to the links using the .nav-icon class
               with font-awesome or any other icon font library -->
          <li class="nav-item">
            <a href="../gallery.html" class="nav-link active">
              <i class="nav-icon far fa-image"></i>
              <p>
                Dashboard
              </p>
            </a>
          </li>
          <li class="nav-item">
            <a href="../kanban.html" class="nav-link">
              <i class="nav-icon fas fa-columns"></i>
              <p>
                Ride Registration
              </p>
            </a>
          </li>
          <li class="nav-item">
            <a href="../gallery.html" class="nav-link">
              <i class="nav-icon far fa-image"></i>
              <p>
                Scheduled Rides
              </p>
            </a>
          </li>
             
             
            <li class="nav-item">
            <a href="../gallery.html" class="nav-link">
              <i class="nav-icon far fa-image"></i>
              <p>
                Reports
              </p>
            </a>
          </li>
        </ul>
      </nav>
      <!-- /.sidebar-menu -->
    </div>
    <!-- /.sidebar -->
  </aside>

  <!-- Content Wrapper. Contains page content -->
  <div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content-header">
      <div class="container-fluid">
        <div class="row mb-2">
          <div class="col-sm-6">
            <h1>Fixed Layout</h1>
          </div>
          <div class="col-sm-6">
            <ol class="breadcrumb float-sm-right">
              <li class="breadcrumb-item"><a href="#">Home</a></li>
              <li class="breadcrumb-item"><a href="#">Logout</a></li>
              <li class="breadcrumb-item active">Fixed Layout</li>
            </ol>
          </div>
        </div>
      </div><!-- /.container-fluid -->
    </section>

    <!-- Main content -->
    <section class="content">

      <div class="container-fluid">
        <div class="row">
          <div class="col-12">
            <!-- Default box -->
            <div class="card">
              <div class="card-header">
                <h3 class="card-title">Title</h3>

                <div class="card-tools">
                  <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                    <i class="fas fa-minus"></i>
                  </button>
                  <button type="button" class="btn btn-tool" data-card-widget="remove" title="Remove">
                    <i class="fas fa-times"></i>
                  </button>
                </div>
              </div>
              <div class="card-body">
                Start creating your amazing application!
              </div>
              <!-- /.card-body -->
              <div class="card-footer">
                Footer
              </div>
              <!-- /.card-footer-->
            </div>
            <!-- /.card -->
          </div>
        </div>
      </div>
    </section>
    <!-- /.content -->
  </div>
  <!-- /.content-wrapper -->
 
  <!-- Control Sidebar -->
  <aside class="control-sidebar control-sidebar-dark">
    <!-- Control sidebar content goes here -->
  </aside>
  <!-- /.control-sidebar -->
</div>

<!-- jQuery -->
<%--<script src="../../plugins/jquery/jquery.min.js"></script>--%>
</body>
</html>

Date: 11/24/2022

Started writing validations for the fields following the below document. Reference document for adding validations to the model:

https://learn.microsoft.com/en-us/aspnet/mvc/overview/older-versions/getting-started-with-aspnet-mvc3/cs/adding-validation-to-the-model

Date 01/22/2023

Modified with correct heading to the html rider page.
<table class="table">
    <tr>
        <td class="tdheading" align="left">
            Rider Register
        </td>
    </tr>

Date 01/27/2023

 public static string GenerateOTP()
        {
            int OTPLength = 6;
            string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0" };
            string OTP = string.Empty;

            Random rand = new Random();
            for (int i = 0; i < OTPLength; i++)
            {
                OTP += saAllowedCharacters[rand.Next(0, 9)];
            }
            return OTP;
        }
 Sending email implementation

  public static void SendEmail(MailRequest mailRequest)
        {
            try
            {
                //yuydvagtngyotocj
                var email = new MimeMessage();
                email.From.Add(MailboxAddress.Parse(FromEmailAddress));
                email.To.Add(MailboxAddress.Parse(mailRequest.ToEmail));
                email.Subject = mailRequest.Subject; 
                email.Body = new TextPart(TextFormat.Html) { Text = mailRequest.Body };

                // send email
                using var smtp = new SmtpClient();
                smtp.Connect(smtpHost, port, SecureSocketOptions.StartTls);
                smtp.Authenticate(FromEmailAddress, FromAppPwd);
                smtp.Send(email);
                smtp.Disconnect(true);
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }


  public IActionResult Index(ExtendedOTPModel otpModel)
        {
            if(ModelState.IsValid)
            {
                var baseModel = JsonConvert.DeserializeObject<OTPModel>(TempData["otpModel"].ToString());
                if (baseModel.generatedOTP==otpModel.OTP)
                {
                    TempData["UserId"] = baseModel.UserId;
                    return RedirectToAction("UpdatePassword");
                }
                else
                {
                    ModelState.AddModelError("OTP", "OTP is invalid");
                }
            }
            

  public static string SendOTP(string EmailAddress)
        {
            string OTP = GenerateOTP();
            MailRequest mailRequest = new MailRequest();
            mailRequest.ToEmail = EmailAddress;
            mailRequest.Subject = "Verification code for Password Change";
            mailRequest.Body = "<p>Hi,</p><br/><p>Please use below verification code for changing password</p>" +
                "<br/><h3>" + OTP + "</h3><br/><p>Thanks,</p><br/><p>Bearcats Commute</p>";
            EmailHelper.SendEmail(mailRequest);
            return OTP;
        }

Research on google map integration:

https://developers.google.com/maps/documentation/javascript/get-api-key

02/09/2023

  try
                        {
                            OTPModel otpModel = new OTPModel();
                            otpModel.UserId= userSet.Tables[0].Rows[0][3].ToString();
                            otpModel.generatedOTP = OTPHelper.SendOTP(emailAddress);
                            TempData["otpModel"] = JsonConvert.SerializeObject(otpModel);
                            TempData["OTPExpiryTime"] = DateTime.Now.AddMinutes(3);
                            return RedirectToAction("Index", "ForgotPwd");
                        }
                        catch(Exception ex)
                        {
                            ModelState.AddModelError("UserName", "An error occured while sending OTP");
                        }                          
Configure session time out for application

  public void ConfigureServices(IServiceCollection services)
        {
            services.AddSession(options =>
            {
                options.IdleTimeout = TimeSpan.FromMinutes(10);
            });
            services.AddControllersWithViews();
        }
Sending email for book ride
 mailRequest.Body = body.ToString();
            try
            {
                EmailHelper.SendEmail(mailRequest);
            }
            catch(Exception ex)
            {
                msg = msg + "But an error occured while sending email";
            }


UI Design

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Bearcats_Commute</title>
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="stylesheet" href="~/css/BearcatsStyleSheet.css" />
</head>
<body class="BackgroundImage">   
    @RenderBody()
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>


Add total rides page.

 function showTotalRides() {
        $.jgrid.gridUnload("#tblDetails");
        $("#tblDetails").jqGrid({
            url: "/DriverPage/GetTotalRides",
            datatype: "json",
            mtype: "GET",
            colNames: ['', 'Date', 'Time', 'Driver Name', 'Ride Start Address', 'Ride End Address', 'Total Seats', 'Booked Seats', 'Price/Seat'],
            colModel: [
                { name: 'TxnId', index: 'TxnId', width: 100, align: 'center', hidden: true },
                { name: 'Ridedate', index: 'Ridedate', width: 100, align: 'center' },
                { name: 'RideTime', index: 'RideTime', width: 100, sorttype: "string" },
                { name: 'DriverName', index: 'DriverName', align: "center", width: 120, sorttype: "string" },
                { name: 'StartAddress', index: 'StartAddress', align: "center", width: 200, sorttype: "string" },
                { name: 'EndAddress', index: 'EndAddress', align: "center", width: 200, sorttype: "string" },
                { name: 'TotalSeats', index: 'TotalSeats', align: "center", width: 100, sorttype: "string" },
                { name: 'BookedSeats', index: 'BookedSeats', align: "center", width: 100, sorttype: "string" },
                { name: 'SeatPrice', index: 'SeatPrice', align: "center", width: 100, sorttype: "string" },
            ],
            height: '100%',
            viewrecords: true,
            caption: "Details",
            emptyrecords: 'No records Found',
            rowNum: 20,
            width: '100%',
            pager: jQuery("#pager"),
            cmTemplate: { sortable: false },
            rownumbers: true,
            altRows: true,
            jsonReader: {
                root: "rows",
                page: "page",
                total: "total",
                records: "records",
                id: "",
                cell: "",
                repeatitems: false
            }
        });
        return false;
    }
********************
## Ram Reddy. Boppidi
Date: 11/4/2022
Function for Accept Button

function btnAccept(cellvalue, options, rowObject) {
            return '<label id=' + options.rowId + ' onclick="return AcceptRide(' + options.rowId + ');" style="text-decoration:underline;cursor:pointer;color:blue;">' + 'Accept' + '</label>';
        }


Function for Reject Button
function btnReject(cellvalue, options, rowObject) {
            return '<label id=' + options.rowId + ' onclick="return RejectRide(' + options.rowId + ');" style="text-decoration:underline;cursor:pointer;color:blue;">' + 'Reject' + '</label>';
        }

 Below is the Store procedure in My SQL for Driver registration

 DELIMITER $$
CREATE DEFINER=`admin`@`%` PROCEDURE `SP_DriverRegistration`(      
in Firstname VARCHAR(255),      
in LastName VARCHAR(255),      
in Gender VARCHAR(255),      
in DOB VARCHAR(255),      
in Mobile VARCHAR(255),      
in Vehicleno VARCHAR(255),      
in Address1 VARCHAR(255),      
in Address2 VARCHAR(255),      
in City VARCHAR(255),      
in State VARCHAR(255),     
in Zip VARCHAR(255),      
in IDProof VARCHAR(255),      
in Idno VARCHAR(255),     
in Username VARCHAR(255),     
in Password VARCHAR(255), 
in SID nvarchar(255),
out MSG VARCHAR(255)    
)
BEGIN   
 
  INSERT INTO DriverRegistration(Firstname,LastName,Gender,DOB,Mobile,Vehicleno,Address1,Address2,City,State,Zip,IDProof,Idno,Username,Password,InsertedDatetime,SID)      
  SELECT Firstname,LastName,Gender,DOB,Mobile,Vehicleno,Address1,Address2,City,State,Zip,IDProof,Idno,Username,Password,current_timestamp(),SID;     
     
     
  set MSG = 'Driver Registered Successfully';   
  
END$$
DELIMITER ;
       

Function to display Pop Up Grid:


        function showPopupGrid(ViewID) {
            ViewID = ViewID;
            jQuery("#tblDetails1").GridUnload();
            jQuery("#tblDetails1").jqGrid({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                url: '<%=ResolveUrl("~/WebServices/Rides.asmx/GetRideDetails") %>',
                datatype: "json",
                height: '100%',
                rowNum: 20,
                width: '100%',
                postData: {
                    ViewID: ViewID,
                },
                cmTemplate: { sortable: false },
                colNames: ['', 'Date', 'Time', 'Rider Name', 'Ride Start Address', 'Ride End Address', 'NO. of Seats', '', ''],
                colModel: [
                    { name: 'TxnId', index: 'TxnId', width: 100, align: 'center', hidden: true },
                    { name: 'Ridedate', index: 'Ridedate', width: 100, align: 'center' },
                    { name: 'RideTime', index: 'RideTime', width: 100, sorttype: "string" },
                    { name: 'DriverName', index: 'DriverName', align: "center", width: 120, sorttype: "string" },
                    { name: 'StartAddress', index: 'StartAddress', align: "center", width: 200, sorttype: "string" },
                    { name: 'EndAddress', index: 'EndAddress', align: "center", width: 200, sorttype: "string" },
                    { name: 'BookedSeats', index: 'BookedSeats', align: "center", width: 100, sorttype: "string" },
                    { name: 'Act', index: 'Act', width: 90, align: 'center', formatter: btnAccept },
                    { name: 'Act', index: 'Act', width: 90, align: 'center', formatter: btnReject },

                ],
                pager: "#pager1",
                viewrecords: true,
                rownumbers: true,
                caption: "Booked Details",
                altRows: true,
                jsonReader: {
                    root: function (obj) { return obj.rows },
                    page: function (obj) { return obj.page },
                    total: function (obj) { return obj.total },
                    records: function (obj) { return obj.records },
                    id: "",
                    cell: "",
                    repeatitems: false
                },
                gridComplete: function () {
                    var ids = jQuery("#tblDetails1").jqGrid('getDataIDs');
                    if (ids.length == 0) {
                    }
                    else {
                        for (var i = 0; i < ids.length; i++) {
                            var cl = ids[i];

                        }
                    }
                }
            });
            return false;
        }



Validation code for Login:

public class LoginModel
    {
        [Required(ErrorMessage ="Please enter UserName")]
        public string UserName { get; set; }
        [Required(ErrorMessage = "Please enter Password")]
        public string Password { get; set; }
    }

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "ConnectionStrings": {
    //"MDConnection": "data source=HDC3-L-151CJWV\\SQLEXPRESS;Initial Catalog=BearcatCommute;Integrated Security=True;"
    "MDConnection": "data source=NW47405\\S546831;Initial Catalog=BearcatCommute;Integrated Security=True;"
  },
  "AllowedHosts": "*"
}

<div class="input-group">
            @Html.TextBoxFor(m => m.NewPassword)
            @Html.LabelFor(m => m.NewPassword)
        </div>
        <div class="input-group">
            @Html.PasswordFor(m => m.ConfirmPassword)
            @Html.LabelFor(m => m.ConfirmPassword)
        </div>


Code for OTP Model:

        public string UserId { get; set; }
        public string generatedOTP { get; set; }

    public class ExtendedOTPModel
    {
        [Required(ErrorMessage = "Please enter OTP")]
        public string OTP { get; set; }
    }


OTP validation code:

public static string GenerateOTP()
        {
            int OTPLength = 6;
            string[] saAllowedCharacters = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0" };
            string OTP = string.Empty;

            Random rand = new Random();
            for (int i = 0; i < OTPLength; i++)
            {
                OTP += saAllowedCharacters[rand.Next(0, 9)];
            }
            return OTP;


private static string FromEmailAddress = "Bearcats.Commute@gmail.com";
private static string FromAppPwd = "yuydvagtngyotocj";
private static string smtpHost = "smtp.gmail.com";
private static int port = 587;   

//Assigning details
var email = new MimeMessage();
email.From.Add(MailboxAddress.Parse(FromEmailAddress));
email.To.Add(MailboxAddress.Parse(mailRequest.ToEmail));
email.Subject = mailRequest.Subject; 
email.Body = new TextPart(TextFormat.Html) { Text = mailRequest.Body };



public static class OTPHelper
    {
        public static string SendOTP(string EmailAddress)
        {
            string OTP = GenerateOTP();
            MailRequest mailRequest = new MailRequest();
            mailRequest.ToEmail = EmailAddress;
            mailRequest.Subject = "Verification code for Password Change";
            mailRequest.Body = "<p>Hi,</p><br/><p>Please use below verification code for changing password</p>" +
                "<br/><h3>" + OTP + "</h3><br/><p>Thanks,</p><br/><p>Bearcats Commute</p>";
            EmailHelper.SendEmail(mailRequest);
            return OTP;
        }


 public class OTPModel
    {
        public string UserId { get; set; }
        public string generatedOTP { get; set; }
    }

    public class ExtendedOTPModel
    {
        [Required(ErrorMessage = "Please enter OTP")]
        public string OTP { get; set; }
    }
}


Js code for google maps markers:

 //creating new Marker
        marker = new google.maps.Marker({
            position: mapsMouseEvent.latLng,
            animation: google.maps.Animation.DROP,
        });

        marker.setMap(map);
        geocodeLatLng(geocoder, map, infoWindow, mapsMouseEvent.latLng.toJSON().lat, mapsMouseEvent.latLng.toJSON().lng);
    });

Code for OTP expiration after 3 AddMinutes

if (role.ToUpper() == "D")
                    {
                        HttpContext.Session.SetString("ForgotPwdUserRole", role);
                        string emailAddress= userSet.Tables[0].Rows[0][1].ToString();
                        try
                        {
                            OTPModel otpModel = new OTPModel();
                            otpModel.UserId= userSet.Tables[0].Rows[0][3].ToString();
                            otpModel.generatedOTP = OTPHelper.SendOTP(emailAddress);
                            TempData["otpModel"] = JsonConvert.SerializeObject(otpModel);
                            TempData["OTPExpiryTime"] = DateTime.Now.AddMinutes(3);
                            return RedirectToAction("Index", "ForgotPwd");
                        }
                        catch(Exception ex)
                        {
                            ModelState.AddModelError("UserName", "An error occured while sending OTP");
                        }                        
                    
Functions for Start and End addresses:

function selectStartAddress() {
    document.getElementById("mapDiv").style.display = "block";
    if (map == null)
    {
        initMap(40.35079983422656, -94.88447694817584, 'map');
    }
    AddControls(true);
    return false;
}

function selectEndAddress() {
    document.getElementById("mapDiv").style.display = "block";
    if (map == null)
    {
        initMap(40.35079983422656, -94.88447694817584, 'map');
    }
    AddControls(false);
    return false;
}





        